import org.springframework.boot.gradle.plugin.SpringBootPlugin

buildscript {

    repositories {
        mavenCentral()
        maven { url "https://plugins.gradle.org/m2/" }

        repositories {
            mavenCentral()
            maven { url 'https://packages.confluent.io/maven/' }
            maven {
                url = uri("https://maven.pkg.github.com/odradek-dev/pay-kafka-intergation")
                credentials {
                    username = System.getenv("TOKEN") ?: project.findProperty("gpr.user")
                    password = System.getenv("TOKEN") ?: project.findProperty("gpr.token")
                }
            }
        }
    }

    dependencies {
        classpath "io.spring.gradle:dependency-management-plugin:1.0.11.RELEASE"
        classpath "org.springframework.boot:spring-boot-gradle-plugin:2.5.4"
    }
}

plugins {
    id 'idea'
}

group = projectGroup
version = projectVersion


idea {
    module {
        excludeDirs = [file(".gradle"), file(".build"), file(".idea"), file(".out"), file(".docs")]
    }
}

def repos = ["pay-kafka-intergation"]

allprojects {
    repositories {
        mavenCentral()
        maven { url 'https://packages.confluent.io/maven/' }
        maven {
            url = uri("https://maven.pkg.github.com/odradek-dev/pay-kafka-intergation")
            credentials {
                username = System.getenv("TOKEN") ?: project.findProperty("gpr.user")
                password = System.getenv("TOKEN") ?: project.findProperty("gpr.token")
            }
        }
    }
}

subprojects {

    repositories {
        mavenCentral()
        maven { url 'https://packages.confluent.io/maven/' }
        maven {
            url = uri("https://maven.pkg.github.com/odradek-dev/pay-kafka-intergation")
            credentials {
                username = System.getenv("TOKEN") ?: project.findProperty("gpr.user")
                password = System.getenv("TOKEN") ?: project.findProperty("gpr.token")
            }
        }
    }

    if (!file('build.gradle').exists()) {
        return
    }

    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'org.springframework.boot'


    buildDir = new File(rootProject.projectDir, '.build/' + project.name)

    apply plugin: 'idea'

    idea {
        module {
            outputDir = new File(rootProject.projectDir, '.out')
            testOutputDir = new File(rootProject.projectDir, '.out')
        }
    }

    apply plugin: 'java'

    tasks.withType(JavaCompile) {
        sourceCompatibility = projectSourceCompatibility
        targetCompatibility = projectSourceCompatibility
    }

    configurations {

        // Tests
        springBootStarterTest

        // Spring
        springWeb
        springData
        springWebsocket
        springActuator
        springMail
        springDevtools
        springAOP
        springKafka
        springDocs
        springValidation

        // Monitoring
        apm

        // Lombok
        lombok

        tomcat

        // Third-Party
        bitcoinJ
        guava
        graphql

        javaX
    }

    dependencies {

        // Spring
        springWeb 'org.springframework.boot:spring-boot-starter-web'
        springData 'org.springframework.boot:spring-boot-starter-data-mongodb'
        springWebsocket 'org.springframework.boot:spring-boot-starter-websocket'
        springActuator 'org.springframework.boot:spring-boot-starter-actuator'
        springMail 'org.springframework.boot:spring-boot-starter-mail'
        springDevtools 'org.springframework.boot:spring-boot-devtools'
        springAOP 'org.springframework.boot:spring-boot-starter-aop'
        springKafka 'com.odradek:pay-kafka-intergation:1.0.2'
        springDocs 'org.springdoc:springdoc-openapi-ui:1.5.2'
        springValidation 'org.springframework.boot:spring-boot-starter-validation'

        // Monitoring
        apm 'co.elastic.apm:apm-agent-api:1.28.4'
        apm 'co.elastic.apm:apm-opentracing:1.28.4'

        // Lombok
        lombok 'org.projectlombok:lombok'
        annotationProcessor 'org.projectlombok:lombok'

        tomcat 'org.springframework.boot:spring-boot-starter-tomcat'

        // Third-Party
        bitcoinJ 'org.bitcoinj:bitcoinj-core:0.15.10'
        guava 'com.google.guava:guava:30.1.1-jre'
        graphql 'com.graphql-java:graphiql-spring-boot-starter:5.0.2'
        graphql 'com.graphql-java:graphql-spring-boot-starter:5.0.2'
        graphql 'com.graphql-java:graphql-java-tools:5.2.4'
        graphql 'com.graphql-java:graphql-java:8.0'

        javaX 'javax.xml.bind:jaxb-api:2.2.4'

        // Testing
        springBootStarterTest('org.springframework.boot:spring-boot-starter-test') {
            exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
        }

        annotationProcessor "org.springframework.boot:spring-boot-configuration-processor"
    }

    dependencyManagement {
        imports {
            mavenBom SpringBootPlugin.BOM_COORDINATES
        }
    }

    compileJava.inputs.files(processResources)

    test {
        useJUnitPlatform()
    }

}